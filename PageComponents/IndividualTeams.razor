@using System.Text.RegularExpressions

<div class="col-sm-12 col-md-2 p-3 text-center">
    <div class="team-name">
        <a href="@url">@Team.Team</a>
    </div>
    <hr class="hrfix" />

    <div class="card-image">
        <a href="@url">
            @if (IsBase64(Team.Image))
            {
                <img src="data:image/png;base64,@Team.Image" style="width:100%; height:100%" class="team-image" />
            }
            else
            {
                <img src="@Team.Image" style="width:100%; height:100%" alt="@Team.Team" class="team-image" />
            }
        </a>
    </div>
    <hr class="hrfix" />

    <div class="team-card-footer">
        <div class="btn-group my-3 text-center" role="group">
            <a href="/teams/edit/@Team.ID" class="btn btn-outline-light"><i class="fa-regular fa-pen-to-square"></i></a>
            <button type="button" class="btn btn-outline-danger" @onclick="(()=>Delete.InvokeAsync(Team))"><i class="fa-regular fa-trash-can"></i></button>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public TeamModel Team { get; set; }
    [Parameter] public EventCallback<TeamModel> Delete { get; set; }

    string url = string.Empty;

    protected override void OnInitialized()
    {
        url = $"teams/{Team.ID}/{Team.Team.Replace(" ", "-")}";
    }

    bool IsBase64(string value)
    {
        value = value.Trim();
        return ((value.Length % 4 == 0) && Regex.IsMatch(value, @"^[a-zA-Z0-9\+/]*={0,3}$",RegexOptions.None));
    }
}
